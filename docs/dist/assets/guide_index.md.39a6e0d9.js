import{o as e,c as t,a as s}from"./app.74d22259.js";const a='{"title":"什么是 VitePress？","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"动机","slug":"动机"},{"level":2,"title":"改进的地方","slug":"改进的地方"},{"level":3,"title":"It Uses Vue 3","slug":"it-uses-vue-3"},{"level":3,"title":"It Uses Vite Under The Hood","slug":"it-uses-vite-under-the-hood"},{"level":3,"title":"Lighter Page Weight","slug":"lighter-page-weight"},{"level":2,"title":"其他不同点","slug":"其他不同点"},{"level":2,"title":"将来这会是 VuePress 的下一版本么？","slug":"将来这会是-vuepress-的下一版本么？"}],"relativePath":"guide/index.md","lastUpdated":1624518248365}',i={},r=s('<h1 id="什么是-vitepress？"><a class="header-anchor" href="#什么是-vitepress？" aria-hidden="true">#</a> 什么是 VitePress？</h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>VitePress is currently in 0.x status. It is already suitable for out-of-the-box documentation use, but the config and theming API may still change between minor releases.</p></div><p>VitePress is <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener noreferrer">VuePress</a>&#39; little brother, built on top of <a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">Vite</a>.</p><h2 id="动机"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2><p>我们喜爱 VuePress v1, 但是使用 webpack 构建时, 就算是一个简单的只有几页的文档所耗费的时间也是让人无法忍受的;<br> We love VuePress v1, but being built on top of Webpack, the time it takes to spin up the dev server for a simple doc site with a few pages is just becoming unbearable.</p><p>更离谱的是热更新也会耗时几秒钟才会在浏览器中反映出来<br> Even HMR updates can take up to seconds to reflect in the browser!</p><p>从根本上上说, 只是因为 VuePress v1 是一个基于 webpack 的应用程序;<br> Fundamentally, this is because VuePress v1 is a Webpack app under the hood.</p><p>即使是有两个页面, webpack 也会将所有资源打包,包括所有的主题资源文件<br> Even with just two pages, it&#39;s a full on Webpack project (including all the theme source files) being compiled.</p><p>当项目中的有很多页面的时候, 就会变的更糟糕 - 每个页面都需要呗完全编译, 而这期间服务器不能展示任何东西<br> It gets even worse when the project has many pages – every page must first be fully compiled before the server can even display anything!</p><p>令人惊喜的是, vite 非常完美的解决了这些问题: <br> Incidentally, Vite solves these problems really well:</p><p>几乎实时的服务启动, 按需编译, 轻巧快速的热更新 <br> nearly instant server start, an on-demand compilation that only compiles the page being served, and lightning-fast HMR.</p><p>而且在 vuepress v1 中,还有一些需要改进的设计, 但由于需要大量的重构，我从来没有时间修复 <br> Plus, there are a few additional design issues I have noted in VuePress v1 over time but never had the time to fix due to the amount of refactoring it would require.</p><p>现在, 有了 vite 和 vue3, 正好重新设计一套有力的 Vue 静态站点生成器 <br> Now, with Vite and Vue 3, it is time to rethink what a &quot;Vue-powered static site generator&quot; can really be.</p><h2 id="改进的地方"><a class="header-anchor" href="#改进的地方" aria-hidden="true">#</a> 改进的地方</h2><p>There&#39;re couple of things that are improved from VuePress v1....</p><h3 id="it-uses-vue-3"><a class="header-anchor" href="#it-uses-vue-3" aria-hidden="true">#</a> It Uses Vue 3</h3><p>Leverages Vue 3&#39;s improved template static analysis to stringify static content as much as possible. Static content is sent as string literals instead of JavaScript render function code – the JS payload is therefore <em>much</em> cheaper to parse, and hydration also becomes faster.</p><p>Note the optimization is applied while still allowing the user to freely mix Vue components inside markdown content – the compiler does the static/dynamic separation for you automatically and you never need to think about it.</p><h3 id="it-uses-vite-under-the-hood"><a class="header-anchor" href="#it-uses-vite-under-the-hood" aria-hidden="true">#</a> It Uses Vite Under The Hood</h3><ul><li>Faster dev server start</li><li>Faster hot updates</li><li>Faster build (uses Rollup internally)</li></ul><h3 id="lighter-page-weight"><a class="header-anchor" href="#lighter-page-weight" aria-hidden="true">#</a> Lighter Page Weight</h3><ul><li>Vue 3 tree-shaking + Rollup code splitting</li><li>Does not ship metadata for every page on every request. This decouples page weight from total number of pages. Only the current page&#39;s metadata is sent. Client side navigation fetches the new page&#39;s component and metadata together.</li><li>Does not use <code>vue-router</code> because the need of VitePress is very simple and specific - a simple custom router (under 200 LOC) is used instead.</li><li>(WIP) i18n locale data should also be fetched on demand.</li></ul><h2 id="其他不同点"><a class="header-anchor" href="#其他不同点" aria-hidden="true">#</a> 其他不同点</h2><p>VitePress is more opinionated and less configurable: VitePress aims to scale back the complexity in the current VuePress and restart from its minimalist roots.</p><p>VitePress is future oriented: VitePress only targets browsers that support native ES module imports. It encourages the use of native JavaScript without transpilation, and CSS variables for theming.</p><h2 id="将来这会是-vuepress-的下一版本么？"><a class="header-anchor" href="#将来这会是-vuepress-的下一版本么？" aria-hidden="true">#</a> 将来这会是 VuePress 的下一版本么？</h2><p>We already have <a href="https://github.com/vuepress/vuepress-next" target="_blank" rel="noopener noreferrer">vuepress-next</a>, which would be the next major version of VuePress. It also makes lots of improvements over VuePress v1, and also supports Vite now.</p><p>VitePress is not compatible with the current VuePress ecosystem (mostly themes and plugins). The overall idea is that VitePress will have a drastically more minimal theming API (preferring JavaScript APIs instead of file layout conventions) and likely no plugins (all customization is done in themes).</p>',28);i.render=function(s,a,i,o,n,l){return e(),t("div",null,[r])};export default i;export{a as __pageData};
