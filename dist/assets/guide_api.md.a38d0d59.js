import{o as a,c as n,a as s}from"./app.854e7494.js";const e='{"title":"API Reference","description":"","frontmatter":{},"headers":[{"level":2,"title":"Helper Methods","slug":"helper-methods"},{"level":3,"title":"useData","slug":"usedata"},{"level":3,"title":"useRoute","slug":"useroute"},{"level":3,"title":"useRouter","slug":"userouter"},{"level":3,"title":"withBase","slug":"withbase"},{"level":2,"title":"Global Components","slug":"global-components"},{"level":3,"title":"<Content/>","slug":"content"},{"level":3,"title":"<ClientOnly/>","slug":"clientonly"}],"relativePath":"guide/api.md","lastUpdated":1624440457686}',t={},o=s('<h1 id="api-reference"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h2 id="helper-methods"><a class="header-anchor" href="#helper-methods" aria-hidden="true">#</a> Helper Methods</h2><p>The following methods are globally importable from <code>vitepress</code> and are typically used in custom theme Vue components. However, they are also usable inside <code>.md</code> pages because markdown files are compiled into Vue single-file components.</p><p>Methods that start with <code>use*</code> indicates that it is a <a href="https://v3.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noopener noreferrer">Vue 3 Composition API</a> function that can only be used inside <code>setup()</code> or <code>&lt;script setup&gt;</code>.</p><h3 id="usedata"><a class="header-anchor" href="#usedata" aria-hidden="true">#</a> <code>useData</code></h3><p>Returns page-specific data. The returned object has the following type:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">VitePressData</span> <span class="token punctuation">{</span>\n  site<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>SiteData<span class="token operator">&gt;</span>\n  page<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>PageData<span class="token operator">&gt;</span>\n  theme<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token comment">// themeConfig from .vitepress/config.js</span>\n  frontmatter<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>PageData<span class="token punctuation">[</span><span class="token string">&#39;frontmatter&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  title<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  description<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  lang<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  localePath<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Example:</strong></p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitepress&#39;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ theme.heroText }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="useroute"><a class="header-anchor" href="#useroute" aria-hidden="true">#</a> <code>useRoute</code></h3><p>Returns the current route object with the following type:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token builtin">string</span>\n  data<span class="token operator">:</span> PageData\n  component<span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="userouter"><a class="header-anchor" href="#userouter" aria-hidden="true">#</a> <code>useRouter</code></h3><p>Returns the VitePress router instance so you can programmatically navigate to another page.</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Router</span> <span class="token punctuation">{</span>\n  route<span class="token operator">:</span> Route\n  <span class="token function-variable function">go</span><span class="token operator">:</span> <span class="token punctuation">(</span>href<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="withbase"><a class="header-anchor" href="#withbase" aria-hidden="true">#</a> <code>withBase</code></h3><ul><li><p><strong>Type</strong>: <code>(path: string) =&gt; string</code></p><p>Appends the configured <a href="/config/basics.html#base"><code>base</code></a> to a given URL path. Also see <a href="/guide/assets.html#base-url">Base URL</a>.</p></li></ul><h2 id="global-components"><a class="header-anchor" href="#global-components" aria-hidden="true">#</a> Global Components</h2><p>VitePress comes with few built-in component that can be used globally. You may use these components in your markdown or your custom theme configuration.</p><h3 id="content"><a class="header-anchor" href="#content" aria-hidden="true">#</a> <code>&lt;Content/&gt;</code></h3><p>The <code>&lt;Content/&gt;</code> component displays the rendered markdown contents. Useful <a href="https://vitepress.vuejs.org/guide/customization.html" target="_blank" rel="noopener noreferrer">when creating your own theme</a>.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Custom Layout!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="clientonly"><a class="header-anchor" href="#clientonly" aria-hidden="true">#</a> <code>&lt;ClientOnly/&gt;</code></h3><p>The <code>&lt;ClientOnly/&gt;</code> component renderes its slot only at client side.</p><p>Because VitePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the universal code requirements. In short, make sure to only access Browser / DOM APIs in beforeMount or mounted hooks.</p><p>If you are using or demoing components that are not SSR-friendly (for example, contain custom directives), you can wrap them inside the <code>ClientOnly</code> component.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NonSSRFriendlyComponent</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',27);t.render=function(s,e,t,p,c,l){return a(),n("div",null,[o])};export default t;export{e as __pageData};
