import{o as e,c as s,a}from"./app.42b3b703.js";const n='{"title":"Configuration","description":"","frontmatter":{},"relativePath":"guide/configuration.md","lastUpdated":1624440457686}',t={},o=a('<h1 id="configuration"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><p>Without any configuration, the page is pretty minimal, and the user has no way to navigate around the site. To customize your site, let’s first create a <code>.vitepress</code> directory inside your docs directory. This is where all VitePress-specific files will be placed. Your project structure is probably like this:</p><div class="language-bash"><pre><code><span class="token builtin class-name">.</span>\n├─ docs\n│  ├─ .vitepress\n│  │  └─ config.js\n│  └─ index.md\n└─ package.json\n</code></pre></div><p>The essential file for configuring a VitePress site is <code>.vitepress/config.js</code>, which should export a JavaScript object:</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;Hello VitePress&#39;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;Just playing around.&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Check out the <a href="/config/basics.html">Config Reference</a> for a full list of options.</p>',6);t.render=function(a,n,t,i,r,p){return e(),s("div",null,[o])};export default t;export{n as __pageData};
